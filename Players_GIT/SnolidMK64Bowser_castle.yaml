#                                           .                                                          
#                                        ..;         .xx                                              
#                                        ;::.      .xxxX;xx       ..                                  
#                                        +:.::   :xXx;xXXXX.      ...                                 
#                                        ;+;;+x:xXXx++xXXxx+     .:::.                                
#                                         xxxxxX$$Xxxxxxxxxx   :::::;                                 
#                                          XXXxx$$$$$XXX$$XXxX+;;;;+.                                 
#                                          $xxXX$$$$$$xxxXXX$xxx+++                                   
#                                ...      ;&XxXX$x+X$x+xxXXX$$XXX.   ...                              
#                                         &$+xXx&$$$XxxX+$&$$$&$+....+xx$x;:.                         
#                               .       ...$+..+XxX$X+.  .$$$&&&;..  ;&::;;;::.                       
#                              .:.....:...........;$$X   ;XX$$&&$X&X$$.;;;;;;;;;;.                    
#                              ..;;;;;:.:::;.....:.:;;+x......;&&&&&&;;;;;;;;;:::;;.                  
#                             .$&&&&$x;::::.................:::;$&&&&:;;;++;;:::::;;:                 
#                            .. +&&&X++::;;................:+:::;:.;&:;;$&x +$$$x;;;;                 
#                            &&&&&&$Xxx+;;++;::::.......::;;..:::..:&+.X&&;.x$$&&X&x;                 
#                           XX+;;;::;+X$x+++xxXx+;:::;;+++;:..:XXX&&$x;x;::;;;;xX .$x                 
#                           xx+;;:...;x+++:.;&&&Xxxxxxx..;;.:+$$x;:;;;;;;;;;++:++&&&+                 
#                           .+;;::.::+xx++:..&&&&: :: X:;;;+;;xx;:+x;;;;;;;;+..x+;x&:                 
#                           .+;;::::;+x+..........:$+.;;::+xxxxx;;xxxx++;;;;++x;:;;:                  
#                           .+;;;::::;x;.............:::+xxxxx;::;++xxxx+x++++;::;;+                  
#                            ++;;;:::+&x;:::;++:.....:;+xxx:::::;;+++xxxxxxxx+;:;++;:                 
#                            +++;;;XX: +$$XxXxxxx+::;+xxxx;;;;;;++xxxX+:;xx+:;x+x+;;:                 
#                            :x++x&&&$++++++xxxxxxxxxxxxx+;++xxx++xXXX+:...::.xx+;;+.                 
#               ;&&$.        .;X$&&&&X;+++;;+++xxxxxxxxx:::;++++xXXXXXxx;:::+Xx+;+:                   
#             X&&&&&&&&&&&+   +x&..$+;;;+x+;.;&&&&&&&&&XxxxxxxxXXXXXxxxxxxxx.                         
#            ;&&&&&&&&&&&&&&+xxxx$&++;::;X&&&&&&&&&&&&&&&&&&$x++XXXXxxxxxxxxxx                        
#           ;&&&&&&&&&&&&&X+;;+xxxx;++;::;x$&&&xX$$$&&&&&&&&&&$xXXXxxxxxxxxxxxx:                      
#          .:&&&$$$$&&&&&X+;;;;;+x+;:++;;:;xXX$$$$$$$x++x&&&&&&&&Xxxx++;;+xxxxxX.                     
#          .$&&$$$$$$$$$&x+;;;;:;xx;;::x+;;;X&&&&&$X&&$$$$$&&&&&&$++;;::..:++xxx;                     
#          +&&&&&&&$$$$$&x+;;;;;::+xx+;;xXX$+&&&&&XX&&&&&&&&&&&&&X+;;;::..:++xxxx                     
#         ;$&&&&&&&&&&&&&X++;;;;;;xxxxxxxxXxXXX&&X;$&&&&&&&&&&&$xx+;;;:..:++++xxx                     
#         +&&&&&&&&&&&&&&&x++;;;;;xxxxxXXxxxxXXXX+;XxxxxxxXXXXx+++;;;;::::;;;.. .                     
#         x&&&$xx+xX$&&&&&$xx+++;+++:..;;+xx++xXX xXXXXXXXXXXxx+x++;;;;;;;;;....:                     
#         +&&&xxx+:..:;+xx;:Xxx++;:: .:+XxxxxxXX+.XXXXXXXXX$&$XxXx+;;;;;;+++++++...:                  
#          x&&&$&&$$$XX+;+xx&&Xx:  .++xx+xxxxxXX:xXxXXXXX&&&&&&&&x++;;;+;:....::;x;...                
#            .&&&&&&&&&&&&$Xx&$;: :;:     .:+x&X.X&&&&&&&&&&&&&&&x+;+;.::::::::;:;++;                 
#            &&&&&&&&&&&&&$  Xx  ;x+.:+xxx+;+&&;:$&&&&&&&&&&&&&&X+++::::;;;;;;;;;++:                  
#           ;&&&$$$$$$&&&&&  x+;++xxx: .+xX&&&$.x&&x    .+&&&&&&X++;;;;;;;;;;;;;+;                    
#           :&&&X$$$$$$$&&$:;+xXXxXxxxx+ .&&&&x:X&&&&&&&$+.X&XX$$x+;;;;;;;;;;++;                      
#          .+&&&&&&&&&&&&&&x+xxXXxxxxx+:: .:+x:;&&&&&+;.  .Xxxxxxxx+++++++++x:                        
#          .x&&&&&&&&&&&&&X;+xxxxXxXxxx;;++xx+ x  . ..++xx;&&&&$XxxxxXXxXx                            
#          .$&&&&&&&&&&&&&X++xxxxXXXxXxx++;...:;+x++x+xxxx. $&&&&$&&&&&&+                             
#           +&&&&&&&&&&&&&  :xXxxxxx;::xx+xxx++++;:.:;+xxxxxxxxxX&&&&&&&&&&&.                         
#           .&&&&&&&&&&&&$     xXxxxxxxxxxX$&$&&x+xx++xxxXX+xxxX&&&&&&&&&&&&&$                        
#             +X&&&&&&&&x        xxxx;:x+xxxxxxxxxx+x::XXXXxxxx&&&&&&&&&&&&&&&                        
#                                 .xxx+;;:..:;++xxxxxxXXXXXXx::$&&&$$$$&&&&&&&                        
#                                     .:xxxx+++;;:;++xxxXX;+XxX&&&&&&&&&&$&&&&                        
#                                             .+XxxxxxX+     $&&&&&&&&&&&&&&&:                        
#                                                            &&&&&&&&&&&&&&&X                         
#                                                            &&&&&&&&&&&&&&&.                         
#                                                             &&&&&&&&&&&&&                           
#                                                                :x&&&&&&+                            
                                                                                                     
                                                                                                     
name: SnolidMK64

# Used to describe your yaml. Useful if you have multiple files.
description: mario

game: Mario Kart 64
requires:
  version: 0.4.4 # Version of Archipelago required for this yaml to work as expected.
  plando: items

Mario Kart 64:
  progression_balancing:
    # A system that can move progression earlier, to try and prevent the player from getting stuck and bored early.
    # A lower setting means more getting stuck. A higher setting means less getting stuck.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 99
    random: 0
    random-low: 0
    random-high: 0
    disabled: 0 # equivalent to 0
    normal: 50 # equivalent to 50
    extreme: 0 # equivalent to 99

  accessibility:
    # Set rules for reachability of your items/locations.
    # Locations: ensure everything can be reached and acquired.
    # Items: ensure all logically relevant items can be acquired.
    # Minimal: ensure what is needed to reach your goal can be acquired.
    locations: 0
    items: 50
    minimal: 0

  local_items:
    # Forces these items to be in their native world.
    []

  non_local_items:
    # Forces these items to be outside their native world.
    ["Red Switch", "Yellow Switch", "Blue Switch", "Green Switch"]

  start_inventory:
    # Start with these items.
    {}

  start_hints:
    # Start with these item's locations prefilled into the !hint command.
    []

  start_location_hints:
    # Start with these locations and their item prefilled into the !hint command
    []

  exclude_locations:
    # Prevent these locations from having an important item
    ["Koopa Troopa Beach Secret", "Koopa Troopa Beach Rock"]

  priority_locations:
    # Prevent these locations from having an unimportant item
    ["Marty's Secret"]

  item_links:
    # Share part of your item pool with other players.
    []

  start_inventory_from_pool:
    # Start with these items and don't place them in the world.
    # The game decides what the replacement items will be.
    {}

  two_player:
    # (NOT YET SUPPORTED)
    # Start with two characters unlocked and shuffle a separate Player 2 set of item powers into the item pool.
    # 
    # This is the intended way to do local multiplayer, but you can still access the 2-player grand prix mode
    # with this off, and the 1-player grand prix mode with it on.
    false: 50
    true: 0

  game_mode:
    # Determines how to advance through the game. Cups is closest to the vanilla game.
    # 
    # Cups: Courses are raced in sets of four, place 4th or better to advance each race. Unlock each cup progressively.
    # The Cups victory condition is beating the Special Cup on 150cc.
    # 
    # Courses (NOT YET SUPPORTED): Each course is run individually. Unlock the final courses progressively to reach the
    # final race. The Courses victory condition is winning 1st place on the last course.
    cups: 50
    courses: 0

  locked_courses:
    # (NOT YET SUPPORTED)
    # In Courses Game Mode, how many final courses are locked until Progressive Course Unlock items are found.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 15
    4: 50
    random: 0
    random-low: 0
    random-high: 0

  course_order:
    # The order for the courses to be arranged in.
    vanilla: 0
    shuffle: 50
    short_to_long: 0
    long_to_short: 0
    alphabetical: 0

  logic_difficulty:
    # Scales the logic threshhold where skill is involved. Specifically, how many good items are available before you
    # are expected to be able to qualify and win on tough courses.
    # 
    # Basic: Balanced runs for a competent karter.
    # 
    # Advanced: Low logic, high randomness, high skill. Few good items may be available early in the run.
    # 
    # Generous: Makes sure you have plenty of good items early. For easier play, or skipping 50 cc.
    # (Generous is more likely to fail generation. To raise chances try increasing shuffle_item_box_clusters and
    # minimum_filler_items. Future versions will be less fragile to generation failure.)
    # 
    # No Logic: If fences are enabled, THE RUN MAY BE IMPOSSIBLE!
    basic: 50
    advanced: 0
    generous: 0
    no_logic: 0

  final_course_pool:
    # When Course Order is set to shuffle, the final course will be chosen from the Final Course Pool.
    # Leaving this blank will allow any course to come last.
    # 
    # For Rainbow Road to come last use: ["Rainbow Road"].
    # 
    # For Bowser's Castle to come last use: ["Bowser's Castle"].
    # 
    # For any course longer than 1000 meters to come last use: ["Rainbow Road", "Wario Stadium", "Toad's Turnpike"].
    ["Banshee Boardwalk"]

  mirror_course_chance:
    # (NOT YET SUPPORTED) Percent chance for a course to be mirrored.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    0: 50
    random: 0
    random-low: 0
    random-high: 0

  two_lap_courses:
    # Reduce the number of laps in a race from 3 to 2 on long courses.
    off: 0
    rainbow_road: 0
    wario_stadium: 0
    rainbow_road_and_wario_stadium: 50

  hazard_locations:
    # Whether to include hazards which can be destroyed or defeated by the star power as location checks.
    false: 0
    true: 50

  secret_locations:
    # Whether to add 10 location checks as item pickups in noteworthy locations on certain courses.
    false: 0
    true: 50

  shuffle_drift_abilities:
    # Optionally shuffle into the item pool the ability to drift and the ability to use mini-turbos as progressive
    # unlocks per driver. "Plentiful" shuffles a 3rd progressive unlock into the pool. "Free Drift" means drivers start
    # with the ability to drift. "Free mini-turbo" means both abilities will be obtained together.
    off: 0
    on: 0
    plentiful: 50
    free_drift: 0
    free_mini_turbo: 0

  add_traction_tires:
    # Optionally shuffle into the item pool the ability to have traction on off-road and winter surface types,
    # per driver. "Off" means karts always have traction, as in the vanilla game.
    false: 0
    true: 50

  add_starting_items:
    # Optionally shuffle into the item pool a random item power to start each race with, per driver. For example
    # Mario may be able to start each race with a blue shell. Which item is random per driver.
    false: 0
    true: 50

  shuffle_railings:
    # Whether to shuffle most track railings into the item pool.
    false: 0
    true: 50

  fences:
    # Adds colored fences to every course to add variety to the player's racing lines, and blocks about 20% of
    # item boxes. Also adds Yellow/Red/Green/Blue Switch items to the item pool which disable that color of fences.
    # Fences only affect player karts; shells and CPU karts path through them.
    false: 0
    true: 50

  feather_item:
    # Adds the feather item as seen in Super Mario Kart and the early demos of Mario Kart 64. It can be used to vault
    # fences. Having access to the feather puts locations blocked by fences in logic.
    false: 0
    true: 50

  shuffle_item_box_respawning:
    # Causes item boxes to not respawn mid-race, and shuffles one "item box respawning" item into the item pool.
    false: 50
    true: 0

  consistent_item_boxes:
    # Make each item box always give the same item. "On" will always show which item will be given instead of a
    # question mark (?) inside the item boxes. "Identify" will only show which item will be given after triggering the
    # item roulette once.
    off: 50
    on: 0
    identify: 0

  shuffle_special_item_boxes:
    # Whether to shuffle the special item boxes which always give blue shells into the item pool. One is attached to
    # the hot air balloon on Luigi Raceway, and the other is on the big rock on Koopa Troopa Beach.
    false: 0
    true: 50

  shuffle_item_box_clusters:
    # How many item box clusters to shuffle into the item pool. At least one item spot from each shuffled cluster will
    # be used as a location check.
    # (More shuffled clusters helps generation succeed. Future versions will be less fragile to generation failure.)
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 72
    72: 50
    random: 0
    random-low: 0
    random-high: 0

  filler_trap_percentage:
    # What percentage of filler items will be traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    20: 50
    random: 0
    random-low: 0
    random-high: 0

  minimum_filler_items:
    # Force more filler items than needed to match the number of locations.
    # (More filler items helps generation succeed. Future versions will be less fragile to generation failure.)
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 40
    40: 50
    random: 0
    random-low: 0
    random-high: 0

  fix_results_music:
    # Fixes the race win results screen music so the first section repeats 2 times, not 64 times.
    # The official soundtrack uses this AABB form.
    false: 0
    true: 50

  sound_mode:
    # (NOT YET SUPPORTED)
    # Sets the sound mode in the game's option menu ahead of time.
    stereo: 50
    headphones: 0
    mono: 0

  plando_items:
    - items:
        "Peach": 1
      world:
        - BowsersCastle
    - items:
        "Progressive Drift Peach": 3
      world:
        - BowsersCastle
    - items:
        "Winter Tires Peach": 1
      world:
        - BowsersCastle
    - items:
        "Off-Road Tires Peach": 1
      world:
        - BowsersCastle